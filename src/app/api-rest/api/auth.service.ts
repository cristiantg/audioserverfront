/**
 * audioserver
 * `Description`: audioserver (AS) is a state-of-the-art backend webservice for transcribing (decoding) audio files (multilingual) with automatic speech recognition (ASR) technology in real-time via standard https requests.<br><br>`Source code`: Please **cite** this [Github repository](https://github.com/cristiantg/audioserver) in case you are using audioserver for your research/work.<br><br>`Features`:<ol><li>Easy deployment and development </li><li>Flexible ASR infrastructure</li><li> Multilingual ASR</li><li>Very low latency</li><li>Unlimited parallel connections/requests</li><li>Full compatibility with any client-app/device (API REST)</li><li>API documentation: Swagger (standard protocol) </li><li>Easy communication between independent Docker containers </li><li>Tracing of users\"s audiofiles</li><li>Web logs</li><li>Security: https, JWT, bcrypt, register + email confirmation, possibility of removing audio files after recognition, login max. atempts, max. number of requests/user/minute, validation parameters, audio file type and lentgh limit.</li></ol>`Technologies`: RESTful web service with [Express.js](https://expressjs.com/), [Node.js](https://nodejs.org/) & [MongoDB](https://www.mongodb.com) & [Docker](https://www.docker.com/)  & [Kaldi](http://kaldi-asr.org/doc/index.html).<br><br>`Disclaimer`: The information contained in this Swagger-page is confidential, privileged and only for the information of the intended recipient and may not be used, published or redistributed without the prior written consent of CLST.
 *
 * OpenAPI spec version: 0.5
 * Contact: cristian.tejedorgarcia@ru.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { LoginDTO } from '../model/loginDTO';
import { RegisterDTO } from '../model/registerDTO';
import { ResponseTokenDTO } from '../model/responseTokenDTO';
import { ResponseUserDTO } from '../model/responseUserDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({ providedIn: 'root' })
export class AuthService {

    protected basePath = 'https://restasr.cls.ru.nl/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Confirms an email to register in the system
     * Confirms the register of a new user with an unique email and username in the system.
     * @param token token verification
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmationAuth(token: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseUserDTO>;
    public confirmationAuth(token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseUserDTO>>;
    public confirmationAuth(token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseUserDTO>>;
    public confirmationAuth(token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling confirmationAuth.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseUserDTO>('get',`${this.basePath}/auth/confirmation/${encodeURIComponent(String(token))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A user is identified by the system
     * A JWT token is provided when the user is logged correctly in the system. After three wrong attempts the IP is banned for a specific amount of time. Username could be also email.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginAuth(body: LoginDTO, observe?: 'body', reportProgress?: boolean): Observable<ResponseTokenDTO>;
    public loginAuth(body: LoginDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseTokenDTO>>;
    public loginAuth(body: LoginDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseTokenDTO>>;
    public loginAuth(body: LoginDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling loginAuth.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseTokenDTO>('post',`${this.basePath}/auth/login`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Registers a user
     * Registers a new user with a unique email and username in the system. This user will not be active until the registration email is activated.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerAuth(body: RegisterDTO, observe?: 'body', reportProgress?: boolean): Observable<ResponseUserDTO>;
    public registerAuth(body: RegisterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseUserDTO>>;
    public registerAuth(body: RegisterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseUserDTO>>;
    public registerAuth(body: RegisterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerAuth.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseUserDTO>('post',`${this.basePath}/auth/register`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
