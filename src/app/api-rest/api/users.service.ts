/**
 * audioserver
 * `Description`: audioserver (AS) is a state-of-the-art backend webservice for transcribing (decoding) audio files (multilingual) with automatic speech recognition (ASR) technology in real-time via standard https requests.<br><br>`Source code`: Please **cite** this [Github repository](https://github.com/cristiantg/audioserver) in case you are using audioserver for your research/work.<br><br>`Features`:<ol><li>Easy deployment and development </li><li>Flexible ASR infrastructure</li><li> Multilingual ASR</li><li>Very low latency</li><li>Unlimited parallel connections/requests</li><li>Full compatibility with any client-app/device (API REST)</li><li>API documentation: Swagger (standard protocol) </li><li>Easy communication between independent Docker containers </li><li>Tracing of users\"s audiofiles</li><li>Web logs</li><li>Security: https, JWT, bcrypt, register + email confirmation, possibility of removing audio files after recognition, login max. atempts, max. number of requests/user/minute, validation parameters, audio file type and lentgh limit.</li></ol>`Technologies`: RESTful web service with [Express.js](https://expressjs.com/), [Node.js](https://nodejs.org/) & [MongoDB](https://www.mongodb.com) & [Docker](https://www.docker.com/)  & [Kaldi](http://kaldi-asr.org/doc/index.html).<br><br>`Disclaimer`: The information contained in this Swagger-page is confidential, privileged and only for the information of the intended recipient and may not be used, published or redistributed without the prior written consent of CLST.
 *
 * OpenAPI spec version: 0.5
 * Contact: cristian.tejedorgarcia@ru.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AudioDownloadBody } from '../model/audioDownloadBody';
import { ResponseAudioDTO } from '../model/responseAudioDTO';
import { ResponseAudioListDTO } from '../model/responseAudioListDTO';
import { UpdateAudioDTO } from '../model/updateAudioDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsersService {

    protected basePath = 'https://restasr.cls.ru.nl/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Obtains all audio files uploaded by the user with their ASR information
     * Obtains all information available of the audio files of the user. Limited number of requests per user per minute - 100 requests per hour.
     * @param username Username in the system
     * @param limit Number of results per page (1-100)
     * @param page Current page (1-...)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public audioGetFile(username: string, limit?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseAudioListDTO>;
    public audioGetFile(username: string, limit?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAudioListDTO>>;
    public audioGetFile(username: string, limit?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAudioListDTO>>;
    public audioGetFile(username: string, limit?: number, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling audioGetFile.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseAudioListDTO>('get',`${this.basePath}/users/${encodeURIComponent(String(username))}/audio`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads an audio file (a correct audio format is required -&gt; mp3, wav, m4a).
     * Uploads an audio file (a correct audio format is required). Limited number of requests per user per minute - 50 requests per hour.
     * @param file 
     * @param username Username in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public audioPostFileForm(file: Blob, username: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseAudioDTO>;
    public audioPostFileForm(file: Blob, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAudioDTO>>;
    public audioPostFileForm(file: Blob, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAudioDTO>>;
    public audioPostFileForm(file: Blob, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling audioPostFile.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling audioPostFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) as any || formParams;
        }

        return this.httpClient.request<ResponseAudioDTO>('post',`${this.basePath}/users/${encodeURIComponent(String(username))}/audio`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads (like a file upload) an audio file on the cloud to audioserver (a correct audio format is required)
     * Instead of uploading a file, you can download a file in the cloud. Limited number of requests per user per minute - 50 requests per hour.
     * @param body A valid absulute UTF-8 URL with a static audio file.
     * @param username Username in the system (not the email)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadAudioPostFile(body: AudioDownloadBody, username: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseAudioDTO>;
    public downloadAudioPostFile(body: AudioDownloadBody, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAudioDTO>>;
    public downloadAudioPostFile(body: AudioDownloadBody, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAudioDTO>>;
    public downloadAudioPostFile(body: AudioDownloadBody, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling downloadAudioPostFile.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling downloadAudioPostFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseAudioDTO>('post',`${this.basePath}/users/${encodeURIComponent(String(username))}/audio/download`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Checks whether the 1-best hypothesis and ctm information are available or not.
     * This method is inteded for asynchronous decoding (e.g. wav2vec2.0 models).
     * @param username Username in the system
     * @param filename Unique file name provided by the system (e.g., 1234.wav)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isReady(username: string, filename: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseAudioListDTO>;
    public isReady(username: string, filename: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAudioListDTO>>;
    public isReady(username: string, filename: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAudioListDTO>>;
    public isReady(username: string, filename: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling isReady.');
        }

        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling isReady.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseAudioListDTO>('get',`${this.basePath}/users/${encodeURIComponent(String(username))}/audio/${encodeURIComponent(String(filename))}/ready`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtains the ASR-transcription of the specified audio file
     * The 1-best hypothesis and ctm information are provided. The file must be a file previously uploaded with *_/users/{username}/audio*&#x27; or *_/users/{username}/audio/download*&#x27;. If &#x27;keep&#x3D;true&#x27; a new transcription is provided every time you call this request. Be careful and responsible. Limited number of requests per user per minute - 100 requests per hour.
     * @param body Updated user object
     * @param username Username in the system (not the email)
     * @param filename Unique file name provided by the system (e.g., 1234.wav)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAudioPostFile(body: UpdateAudioDTO, username: string, filename: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseAudioDTO>;
    public updateAudioPostFile(body: UpdateAudioDTO, username: string, filename: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAudioDTO>>;
    public updateAudioPostFile(body: UpdateAudioDTO, username: string, filename: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAudioDTO>>;
    public updateAudioPostFile(body: UpdateAudioDTO, username: string, filename: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAudioPostFile.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateAudioPostFile.');
        }

        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling updateAudioPostFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseAudioDTO>('post',`${this.basePath}/users/${encodeURIComponent(String(username))}/audio/${encodeURIComponent(String(filename))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
