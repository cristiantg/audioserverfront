/**
 * audioserver
 * `Description`: audioserver (AS) is a state-of-the-art backend webservice for transcribing (decoding) audio files (multilingual) with automatic speech recognition (ASR) technology in real-time via standard https requests.<br><br>`Source code`: Please **cite** this [Github repository](https://github.com/cristiantg/audioserver) in case you are using audioserver for your research/work.<br><br>`Features`:<ol><li>Easy deployment and development </li><li>Flexible ASR infrastructure</li><li> Multilingual ASR</li><li>Very low latency</li><li>Unlimited parallel connections/requests</li><li>Full compatibility with any client-app/device (API REST)</li><li>API documentation: Swagger (standard protocol) </li><li>Easy communication between independent Docker containers </li><li>Tracing of users\"s audiofiles</li><li>Web logs</li><li>Security: https, JWT, bcrypt, register + email confirmation, possibility of removing audio files after recognition, login max. atempts, max. number of requests/user/minute, validation parameters, audio file type and lentgh limit.</li></ol>`Technologies`: RESTful web service with [Express.js](https://expressjs.com/), [Node.js](https://nodejs.org/) & [MongoDB](https://www.mongodb.com) & [Docker](https://www.docker.com/)  & [Kaldi](http://kaldi-asr.org/doc/index.html).<br><br>`Disclaimer`: The information contained in this Swagger-page is confidential, privileged and only for the information of the intended recipient and may not be used, published or redistributed without the prior written consent of CLST.
 *
 * OpenAPI spec version: 0.5
 * Contact: cristian.tejedorgarcia@ru.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface UpdateAudioDTO { 
    /**
     * 1: DUTCH_CGN, 2: DUTCH_JASMIN, 3: ENGLISH_ASPIRE, 4: DUTCH_DIGIJUF_P1_V2, 5: SIGNON_EN_GB, 6: FLEMISH_LEUVEN, 7: BLISS_BASELINE, 8: BLISS_DIALOGUES, 9: SIGNON_ES_ES, 10: WAV2VEC2.0_DUTCH
     */
    code: UpdateAudioDTO.CodeEnum;
    /**
     * user_id;;scenario_id;;prompt_id/sentence_id/wordlist_id;;round_number;;read_attempt_number;;send_audio_event_timestamp (milliseconds)
     */
    text: string;
    /**
     * true to keep the audio file stored at the web server (you will be able to obtain more transcriptions in future requests). False to remove the audio file from the server after obtaining the transcription (you will not be able to obtain more transcriptions after the first one).
     */
    keep: boolean;
    /**
     * Optional (you might ommit this parameter). This value affects directly to the accuracy. The higher the more accurate will be the transcription.
     */
    beam?: number;
}
export namespace UpdateAudioDTO {
    export type CodeEnum = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10';
    export const CodeEnum = {
        _1: '1' as CodeEnum,
        _2: '2' as CodeEnum,
        _3: '3' as CodeEnum,
        _4: '4' as CodeEnum,
        _5: '5' as CodeEnum,
        _6: '6' as CodeEnum,
        _7: '7' as CodeEnum,
        _8: '8' as CodeEnum,
        _9: '9' as CodeEnum,
        _10: '10' as CodeEnum
    };
}